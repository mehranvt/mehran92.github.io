{
  "hash": "0de9283dd30332882dadbb5d2cdd9a8b",
  "result": {
    "markdown": "---\ntitle: \"Probability and random variable\"\nauthor: \"Mehran Islam\"\ndate: \"2023-12-07\"\ncategories: [code, analysis]\nimage: \"image.jpg\"\n---\n\nThis is a post about probability of survival in the Titanic disaster.\n\nImporting the libraries required:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Load the Titanic dataset\ntitanic_df = pd.read_csv('titanic.csv')\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Let's assume 'Survived' is the target variable\n# Drop irrelevant columns or handle missing data as needed\nfeatures = ['PassengerId','Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch','Fare']\ntarget = 'Survived'\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Convert categorical variables to numerical\ntitanic_df['Sex'] = titanic_df['Sex'].map({'male': 0, 'female': 1})\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Handle missing values\ntitanic_df = titanic_df.dropna(subset=features + [target])\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Extract titles from 'Name' and create a new 'Title' column\ntitanic_df['Title'] = titanic_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Drop 'Name' column\ntitanic_df = titanic_df.drop(columns=['Name'])\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# One-hot encode categorical features\ncategorical_features = ['Title', 'Ticket', 'Cabin', 'Embarked']\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', OneHotEncoder(), categorical_features)\n    ],\n    remainder='passthrough'\n)\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Separate features and target variable\nX = titanic_df[features]\ny = titanic_df[target]\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Train a logistic regression model\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Make predictions on the test set\ny_pred = model.predict(X_test)\ny_pred_proba = model.predict_proba(X_test)[:, 1]\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nclassification_rep = classification_report(y_test, y_pred)\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\\n\", classification_rep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 1.00\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        87\n           1       1.00      1.00      1.00        56\n\n    accuracy                           1.00       143\n   macro avg       1.00      1.00      1.00       143\nweighted avg       1.00      1.00      1.00       143\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Plot the ROC curve and display the AUC score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import precision_recall_curve, average_precision_score\n\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nroc_auc = auc(fpr, tpr)\n\nprecision, recall, _ = precision_recall_curve(y_test, y_pred_proba)\naverage_precision = average_precision_score(y_test, y_pred_proba)\n\n# Plot ROC curve\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc=\"lower right\")\n\n# Plot precision-recall curve\nplt.subplot(1, 2, 2)\nplt.step(recall, precision, color='b', alpha=0.2, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2, color='b')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve: AP={0:0.2f}'.format(average_precision))\n\nplt.tight_layout()\nplt.show()\n\n# Plot probability distribution for positive class\nplt.figure(figsize=(8, 6))\nplt.hist(y_pred_proba[y_test == 1], bins=50, color='blue', alpha=0.7, label='Survived (1)')\nplt.hist(y_pred_proba[y_test == 0], bins=50, color='red', alpha=0.7, label='Not Survived (0)')\nplt.xlabel('Predicted Probability')\nplt.ylabel('Frequency')\nplt.title('Probability Distribution for Positive Class')\nplt.legend(loc='upper right')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=1141 height=468}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-2.png){width=659 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}