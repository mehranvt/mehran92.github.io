{
  "hash": "628bcb6939dc9a273ba3684309b9ab01",
  "result": {
    "markdown": "---\ntitle: \"Classification\"\nauthor: \"Mehran Islam\"\ndate: \"2023-12-07\"\ncategories: [code, analysis]\nimage: \"image.jpg\"\n---\n\n**Classification Post**\n\nImport the required libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\nRead data from file and identify null values\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata=pd.read_csv('athlete_events.csv', index_col=\"ID\")\n```\n:::\n\n\n`{data.apply(pd.isnull).sum()/data.shape[0]}`\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nathletes= data[[\"Team\",\"Sex\", \"Season\",\"Sport\",\"Medal\"]].copy()\n\n#converting into column\nathletes.columns = [\"country\",\"sex\",\"season\", \"sport\",\"medal\"]\n\nathletes\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>China</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Basketball</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>China</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Judo</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Denmark</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Football</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Denmark/Sweden</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Tug-Of-War</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>F</td>\n      <td>Winter</td>\n      <td>Speed Skating</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135569</th>\n      <td>Poland-1</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Luge</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>135570</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Ski Jumping</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>135570</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Ski Jumping</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>135571</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Bobsleigh</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>135571</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Bobsleigh</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>271116 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nathletes.apply(pd.isnull).sum()/athletes.shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ncountry    0.000000\nsex        0.000000\nseason     0.000000\nsport      0.000000\nmedal      0.853262\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nathletes = athletes[athletes['medal'].isin(['Gold', 'Silver', 'Bronze'])].dropna(subset=['medal'])\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nathletes\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Denmark/Sweden</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Tug-Of-War</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Ice Hockey</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Gymnastics</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135554</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Fencing</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n    </tr>\n  </tbody>\n</table>\n<p>39783 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# here we see a high percentage of null values in medal because only some of the athletes win the medal\n\n# Create a new DataFrame with the converted 'target' column\nnew_athletes = athletes.copy()  # Make a copy to avoid modifying the original DataFrame\n\n# Convert the 'medal' column to 'target' based on the medal values\nnew_athletes['target'] = new_athletes['medal'].apply(lambda x: 'gold' if x =='Gold' else 'no gold')\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nnew_athletes\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Denmark/Sweden</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Tug-Of-War</td>\n      <td>Gold</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Ice Hockey</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Gymnastics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135554</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Fencing</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n<p>39783 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#I just want to include four sports in which US generally do good\n\nselected_sports = ['Swimming']\n\nrecent_athletes = new_athletes[new_athletes['sport'].isin(selected_sports)]\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nrecent_athletes.apply(pd.isnull).sum()\nrecent_athletes\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>Hungary</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>259</th>\n      <td>Canada</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>South Africa</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135302</th>\n      <td>West Germany</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135396</th>\n      <td>Netherlands</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135415</th>\n      <td>Soviet Union</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Gold</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>135489</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135522</th>\n      <td>Netherlands</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n<p>3048 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n#lets drop silver medals and gold medals because we are only interested in Gold medals\n\n#athletes = athletes[athletes['medal'] == 'Gold'].dropna(subset=['medal'])\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Create a new DataFrame with the converted columns\nplayers = recent_athletes.copy()  # Make a copy to avoid modifying the original DataFrame\n\n# Convert the 'country' column to numerical values\nplayers['country'] = (recent_athletes['country'] == 'United States').astype(int)\n\n# Convert the 'sex' column to numerical values\nplayers['sex'] = (recent_athletes['sex'] == 'M').astype(int)\n\n\n# Convert the 'season' column to numerical values\nplayers['season'] = (recent_athletes['season'] == 'Summer').astype(int)\n\n# Convert the 'sport' column to numerical values\nplayers['sport'] = (recent_athletes['sport'] == 'Swimming').astype(int)\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n#since we are only interested in swimming data let's drop others\n\n#athletes = athletes[athletes['sport'] == 'Swimming'].dropna(subset=['sport'])\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nplayers\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>259</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135302</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135396</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135415</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Gold</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>135489</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135522</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n<p>3048 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Split the data into features (X) and the target variable (y)\n# to preapre data for ML ready\n\nfrom sklearn.model_selection import train_test_split\nX = players[['country','sport', 'sex']]\ny = players['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\nplayers\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>259</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135302</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135396</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135415</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Gold</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>135489</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135522</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n<p>3048 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nX_test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n(1524, 3)\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsns.countplot(data=players, x='target')\nplt.title('Distribution of Target')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=602 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# to train the naive model as out target is to use naive bayes model\n\n# we use gaussian naive bayes\n\nfrom sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Naive Bayes model\nnb_model = GaussianNB()\n\n# Train the model on the training data\nnb_model.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# now evaluating the model \n\n\nfrom sklearn.metrics import accuracy_score, classification_report\n\n# Predict on the test data\ny_pred = nb_model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\n# Generate a classification report\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report:\\n\", report)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.7099737532808399\nClassification Report:\n               precision    recall  f1-score   support\n\n        gold       0.59      0.58      0.58       537\n     no gold       0.77      0.78      0.78       987\n\n    accuracy                           0.71      1524\n   macro avg       0.68      0.68      0.68      1524\nweighted avg       0.71      0.71      0.71      1524\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Assuming you have already trained your Naive Bayes model (nb_model) and split your data into training (X_train, y_train) and testing (X_test, y_test) sets.\n\n# Example data (replace with your actual data)\n# X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n# nb_model = MultinomialNB()\n# nb_model.fit(X_train, y_train)\n\n# Predict on the test data\ny_pred = nb_model.predict(X_test)\n\n# Create a confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Create a heatmap using seaborn\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=np.unique(y_test), yticklabels=np.unique(y_test))\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=623 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Assuming you have the classification report stored in the 'report' variable\nreport = classification_report(y_test, y_pred, output_dict=True)\n\n# Convert the classification report to a DataFrame for easier plotting\nplayers_report = pd.DataFrame(report).transpose()\n\n# Create a horizontal bar chart using Seaborn\nplt.figure(figsize=(8, 4))\nsns.set(style=\"whitegrid\")\nsns.set_palette(\"pastel\")\nax = sns.barplot(x=players_report['f1-score'], y=players_report.index, orient=\"h\")\nax.set(xlabel='F1-Score', ylabel='Metric')\nplt.title('Classification Report Metrics')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=733 height=381}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfrom sklearn.metrics import precision_recall_curve, roc_curve, auc\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import label_binarize\n\n# Assuming you have already trained your Naive Bayes model (nb_model) and split your data into training (X_train, y_train) and testing (X_test, y_test) sets.\n\n# Example data (replace with your actual data)\n# X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n# nb_model = MultinomialNB()\n# nb_model.fit(X_train, y_train)\n\n# Predict probabilities on the test data\ny_probs = nb_model.predict_proba(X_test)[:, 1]\n\n# Binarize the target variable\ny_test_binary = label_binarize(y_test, classes=np.unique(y_test))\n\n# Calculate precision-recall curve\nprecision, recall, _ = precision_recall_curve(y_test_binary, y_probs)\n\n# Calculate ROC curve\nfpr, tpr, _ = roc_curve(y_test_binary, y_probs)\n\n# Calculate area under the curves (AUC)\npr_auc = auc(recall, precision)\nroc_auc = auc(fpr, tpr)\n\n# Plot Precision-Recall curve\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='darkorange', lw=2, label=f'PR Curve (AUC = {pr_auc:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc='best')\nplt.show()\n\n# Plot ROC curve\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='darkblue', lw=2, label=f'ROC Curve (AUC = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='best')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-1.png){width=675 height=529}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-2.png){width=667 height=529}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}